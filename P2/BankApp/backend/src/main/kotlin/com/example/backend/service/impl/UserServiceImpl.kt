package com.example.backend.service.impl

import com.example.backend.dao.UserMapper
import com.example.backend.domain.User
import com.example.backend.domain.UserCreated
import com.example.backend.mvc.dto.input.CreateUserDTO
import com.example.backend.mvc.dto.input.UpdatePasswordDTO
import com.example.backend.service.PasswordService
import com.example.backend.service.UserService
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import java.math.BigDecimal

@Service
class UserServiceImpl(private val userMapper: UserMapper, private val passwordService: PasswordService) : UserService {

    @Transactional(readOnly = true)
    override fun getUserById(userId: Int): User {
        return userMapper.getUserById(userId)
    }

    @Transactional
    override fun createUser(createUserDTO: CreateUserDTO): User {
        val hashedPassword = passwordService.hashPassword(createUserDTO.password)
        val newUser = UserCreated(
            firstName = createUserDTO.firstName,
            lastName = createUserDTO.lastName,
            email = createUserDTO.email,
            password = hashedPassword,
        )
        val autoGeneratedId = userMapper.insertUser(newUser)
        return User(
            id = autoGeneratedId,
            firstName = newUser.firstName,
            lastName = newUser.lastName,
            email = newUser.email,
            password = newUser.password,
            balance = BigDecimal(0.0000)
        )
    }
    @Transactional
    override fun updatePassword(updatePasswordDTO: UpdatePasswordDTO, userId: Int) {
        userMapper.updatePassword(userId, updatePasswordDTO.newPassword)
    }
}